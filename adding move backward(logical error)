import tkinter as tk
from tkinter import messagebox

class CheckersGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Checkers Game")
        self.board_size = 8
        self.square_size = 50
        self.current_turn = 1  # Player 1 (Red) starts
        self.selected_piece = None
        self.board = self.initialize_board()

        # Create a canvas for the board
        self.canvas = tk.Canvas(self.master, width=self.board_size * self.square_size, height=self.board_size * self.square_size)
        self.canvas.pack()
        self.draw_board()

        # Turn label
        self.turn_label = tk.Label(self.master, text="Player 1's turn (Red)", font=("Arial", 16))
        self.turn_label.pack()

        # Bind mouse click event to the canvas
        self.canvas.bind("<Button-1>", self.select_piece)

    def initialize_board(self):
        board = [[0] * self.board_size for _ in range(self.board_size)]
        for row in range(3):
            for col in range(self.board_size):
                if (row + col) % 2 == 1:
                    board[row][col] = 1
        for row in range(5, 8):
            for col in range(self.board_size):
                if (row + col) % 2 == 1:
                    board[row][col] = 2
        return board

    def draw_board(self):
        self.canvas.delete("all")
        for row in range(self.board_size):
            for col in range(self.board_size):
                color = 'black' if (row + col) % 2 == 0 else 'white'
                self.canvas.create_rectangle(col * self.square_size, row * self.square_size, 
                                             (col + 1) * self.square_size, (row + 1) * self.square_size, fill=color)
                piece = self.board[row][col]
                if piece != 0:
                    piece_color = 'red' if abs(piece) == 1 else 'blue'
                    self.canvas.create_oval(col * self.square_size + 10, row * self.square_size + 10, 
                                            (col + 1) * self.square_size - 10, (row + 1) * self.square_size - 10, fill=piece_color)

    def select_piece(self, event):
        col = event.x // self.square_size
        row = event.y // self.square_size

        try:
            if self.selected_piece is None:
                if (self.board[row][col] == self.current_turn or self.board[row][col] == -self.current_turn):
                    self.selected_piece = (row, col)
                    self.highlight_moves(row, col)
            else:
                valid_moves = self.get_valid_moves(*self.selected_piece)
                if (row, col) in valid_moves:
                    self.move_piece(row, col)
                self.selected_piece = None
                self.draw_board()
                self.switch_turn()
        except IndexError:
            messagebox.showerror("Invalid Selection", "You clicked outside the board!")
        except ValueError as e:
            messagebox.showerror("Invalid Move", str(e))
            self.selected_piece = None

    def highlight_moves(self, row, col):
        valid_moves = self.get_valid_moves(row, col)
        for move in valid_moves:
            self.canvas.create_rectangle(move[1] * self.square_size, move[0] * self.square_size, 
                                         (move[1] + 1) * self.square_size, (move[0] + 1) * self.square_size, 
                                         outline='yellow', width=3)

    def get_valid_moves(self, row, col):
        valid_moves = []
        piece = self.board[row][col]

        # ERROR: Normal pieces can incorrectly move backward in this version.
        directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)] if piece > 0 else [(-1, -1), (-1, 1), (1, -1), (1, 1)]

        for dr, dc in directions:
            self.check_valid_move(row + dr, col + dc, valid_moves)
            self.check_jump_move(row, col, row + 2*dr, col + 2*dc, row + dr, col + dc, valid_moves)

        return valid_moves

    def check_valid_move(self, new_row, new_col, valid_moves):
        if 0 <= new_row < self.board_size and 0 <= new_col < self.board_size and self.board[new_row][new_col] == 0:
            valid_moves.append((new_row, new_col))

    def check_jump_move(self, row, col, new_row, new_col, middle_row, middle_col, valid_moves):
        if (0 <= new_row < self.board_size and 0 <= new_col < self.board_size and 
            self.board[middle_row][middle_col] != 0 and self.board[middle_row][middle_col] != self.current_turn and 
            self.board[new_row][new_col] == 0):
            valid_moves.append((new_row, new_col))

    def move_piece(self, new_row, new_col):
        start_row, start_col = self.selected_piece
        piece = self.board[start_row][start_col]

        self.board[new_row][new_col] = piece
        self.board[start_row][start_col] = 0

        # King promotion
        if new_row == 0 and piece == 2:
            self.board[new_row][new_col] = -2
        elif new_row == self.board_size - 1 and piece == 1:
            self.board[new_row][new_col] = -1

    def switch_turn(self):
        self.current_turn = 2 if self.current_turn == 1 else 1
        self.turn_label.config(text=f"Player {self.current_turn}'s turn")

# Main
if __name__ == "__main__":
    root = tk.Tk()
    game = CheckersGame(root)
    root.mainloop()
